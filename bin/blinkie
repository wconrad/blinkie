#!/usr/bin/env ruby

require "forwardable"
require "gosu"
require "rmagick"

class HorizontalLayout

  extend Forwardable
  include Enumerable

  def initialize(elements = [])
    @elements = elements
  end

  def_delegators :@elements,
     :"<<",
     :each

  def draw(left, top)
    left_to_right_elements.each do |element|
      element.draw(left, top)
      left += element.width
    end
  end

  def width
    @elements.map(&:width).inject(0, &:+)
  end

  def height
    @elements.max(&:height)
  end

end

class LeftToRightLayout < HorizontalLayout

  private

  def left_to_right_elements
    @elements
  end

end

class RightToLeftLayout < HorizontalLayout

  private

  def left_to_right_elements
    @elements.reverse
  end

end

class LedImages

  WIDTH = HEIGHT = 32
  LED_OFF_COLOR = "#440000"
  LED_ON_COLOR = "#aa3300"

  def initialize
    @on = circle(LED_ON_COLOR)
    @off = circle(LED_OFF_COLOR)
  end

  def draw(left, top, on)
    image = image(on)
    z = 0
    scale = 1
    image.draw(left, top, z, scale, scale)
  end

  private

  def image(on)
    if on
      @on
    else
      @off
    end
  end

  def circle(color)
    Gosu::Image.new(rmagick_circle(color))
  end

  def rmagick_circle(color)
    image = Magick::Image.new(WIDTH, HEIGHT) do
      self.background_color = "none"
    end
    gc = Magick::Draw.new
    origin_x = WIDTH / 2
    origin_y = HEIGHT / 2
    perim_x = WIDTH / 2
    perim_y = 1
    gc.fill_color(color)
    gc.circle(origin_x, origin_y, perim_x, perim_y)
    gc.draw(image)
    image
  end
  
end

class Led

  attr_accessor :on

  def initialize(led_images)
    @led_images = led_images
    @on = false
  end

  def draw(left, top)
    @led_images.draw(left, top, @on)
  end

  def width
    LedImages::WIDTH
  end

  def height
    LedImages::HEIGHT
  end

end

class GameWindow < Gosu::Window

  LED_OFF_COLOR = "#440000"
  LED_ON_COLOR = "#aa3300"

  def initialize
    super 640, 480
    self.caption = "Gosu Tutorial Game"
    num_leds = 8
    led_images = LedImages.new
    @leds = RightToLeftLayout.new(
      (0...num_leds).map do |i|
        Led.new(led_images)
      end
    )
    @count = 123
    Thread.new do
      loop do
        @count += 1
        sleep(0.1)
      end
    end
  end

  def needs_cursor?
    true
  end

  def update
  end

  def draw
    draw_background
    @leds.each_with_index do |led, i|
      bit = (@count >> i) & 1
      led.on = (bit != 0)
    end
    @leds.draw(0, 0)
  end

  BACKGROUND_COLOR = 0xff_666666

  def draw_background
    color = Gosu::Color.argb(BACKGROUND_COLOR)
    Gosu.draw_rect(0, 0, width, height, color)
  end

  def draw_rect(x1, y1, x2, y2, color)
    draw_quad(
      0, 0, color,
      width, 0, color,
      0, height, color,
      width, height, color,
      0,
    )
  end
  
  def button_down(id)
    if id == Gosu::KbQ
      close
    end
  end
  
end

window = GameWindow.new
window.show
